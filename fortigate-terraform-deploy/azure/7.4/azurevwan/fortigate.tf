resource "fortios_vpnipsec_phase1interface" "vwan1phase1" {
  depends_on        = [azurerm_vpn_gateway_connection.connection]
  name              = "vwanipsec1"
  authmethod        = "psk"
  dhgrp             = "2"
  dpd               = "on-demand"
  dpd_retrycount    = 3
  dpd_retryinterval = "20"
  ike_version       = "2"
  interface         = "port1"
  ip_version        = "4"
  keepalive         = 10
  keylife           = 3600
  nattraversal      = "enable"
  negotiate_timeout = 30
  peertype          = "any"
  proposal          = "aes256-sha256"
  psksecret         = var.presharekey
  remote_gw         = data.azurerm_vpn_gateway.gatewayresult.bgp_settings[0].instance_0_bgp_peering_address[0].tunnel_ips[0]
  type              = "static"
  comments          = "Terraform test vwan1phase1"
}

resource "fortios_vpnipsec_phase2interface" "vwan1phase2" {
  depends_on     = [fortios_vpnipsec_phase1interface.vwan1phase1]
  dhgrp          = "18 14 2"
  keylifeseconds = 3600
  name           = "vwan1phase2"
  phase1name     = fortios_vpnipsec_phase1interface.vwan1phase1.name
  proposal       = "aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305"
}

resource "fortios_vpnipsec_phase1interface" "vwan2phase1" {
  depends_on        = [azurerm_vpn_gateway_connection.connection]
  name              = "vwan2ipsec1"
  authmethod        = "psk"
  dhgrp             = "2"
  dpd               = "on-demand"
  dpd_retrycount    = 3
  dpd_retryinterval = "20"
  ike_version       = "2"
  interface         = "port1"
  ip_version        = "4"
  keepalive         = 10
  keylife           = 3600
  nattraversal      = "enable"
  negotiate_timeout = 30
  peertype          = "any"
  proposal          = "aes256-sha256"
  psksecret         = var.presharekey
  remote_gw         = data.azurerm_vpn_gateway.gatewayresult.bgp_settings[0].instance_1_bgp_peering_address[0].tunnel_ips[0]
  type              = "static"
  comments          = "Terraform test vwan2phase1"
}

resource "fortios_vpnipsec_phase2interface" "vwan2phase2" {
  depends_on     = [fortios_vpnipsec_phase1interface.vwan2phase1]
  dhgrp          = "18 14 2"
  keylifeseconds = 3600
  name           = "vwan2phase2"
  phase1name     = fortios_vpnipsec_phase1interface.vwan2phase1.name
  proposal       = "aes128-sha1 aes256-sha1 aes128-sha256 aes256-sha256 aes128gcm aes256gcm chacha20poly1305"
}


resource "fortios_router_bgp" "bgp" {
  depends_on           = [fortios_vpnipsec_phase2interface.vwan2phase2]
  as                   = var.bgpasn
  cluster_id           = var.bgppeerip
  ibgp_multipath       = "enable"
  network_import_check = "disable"

}

resource "fortios_routerbgp_neighbor" "neighbor1" {
  depends_on           = [fortios_router_bgp.bgp]
  ip                   = data.azurerm_vpn_gateway.gatewayresult.bgp_settings[0].instance_0_bgp_peering_address[0].default_ips[0]
  remote_as            = var.bgpremoteasn
  soft_reconfiguration = "enable"
}

resource "fortios_routerbgp_neighbor" "neighbor2" {
  depends_on           = [fortios_router_bgp.bgp]
  ip                   = data.azurerm_vpn_gateway.gatewayresult.bgp_settings[0].instance_1_bgp_peering_address[0].default_ips[0]
  remote_as            = var.bgpremoteasn
  soft_reconfiguration = "enable"
}

// need for ipsec 
resource "fortios_firewall_policy" "policyegress" {
  depends_on = [fortios_router_bgp.bgp]
  action     = "accept"
  logtraffic = "utm"
  name       = "policytoazureipsec"
  schedule   = "always"

  dstaddr {
    name = "all"
  }

  dstintf {
    name = fortios_vpnipsec_phase1interface.vwan1phase1.name
  }

  service {
    name = "ALL"
  }

  srcaddr {
    name = "all"
  }

  srcintf {
    name = var.sourceport
  }
}
// need for ipsec 
resource "fortios_firewall_policy" "policyegress2" {
  depends_on = [fortios_router_bgp.bgp]
  action     = "accept"
  logtraffic = "utm"
  name       = "policytoazureipsec2"
  schedule   = "always"

  dstaddr {
    name = "all"
  }

  dstintf {
    name = fortios_vpnipsec_phase1interface.vwan2phase1.name
  }

  service {
    name = "ALL"
  }

  srcaddr {
    name = "all"
  }

  srcintf {
    name = var.sourceport
  }
}



resource "fortios_system_interface" "vwan1" {
  depends_on    = [fortios_firewall_policy.policyegress]
  vdom          = "root"
  name          = fortios_vpnipsec_phase1interface.vwan1phase1.name
  ip            = "${var.bgppeerip} 255.255.255.255"
  remote_ip     = "${data.azurerm_vpn_gateway.gatewayresult.bgp_settings[0].instance_0_bgp_peering_address[0].default_ips[0]} 255.255.255.254"
  autogenerated = "auto"
}

resource "fortios_system_interface" "vwan2" {
  depends_on    = [fortios_firewall_policy.policyegress]
  vdom          = "root"
  name          = fortios_vpnipsec_phase1interface.vwan2phase1.name
  ip            = "${var.bgppeerip} 255.255.255.255"
  remote_ip     = "${data.azurerm_vpn_gateway.gatewayresult.bgp_settings[0].instance_1_bgp_peering_address[0].default_ips[0]} 255.255.255.254"
  autogenerated = "auto"
}
